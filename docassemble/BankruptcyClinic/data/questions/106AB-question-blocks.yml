event: property_intro
section: schedule_ab
question: |
  Please tell the court about your property.
subquestion: |
  In each category, separately list and describe items. List an asset only once. If an asset fits in more than one category, list the asset in the category where you think it fits best. If two married people are filing together, both are equally responsible for supplying correct information.

continue button field: property_intro
---
table: prop_interests_table
rows: prop.interests
columns:
  - First Name: row_item.street
  - Property Type: row_item.type
  - Who has interest: row_item.who
  - Current Value: row_item.current_value
  - Current owned value: row_item.current_owned_value
edit:
  - street
  - type
  - who
  - current_value
  - current_owned_value
---
section: schedule_ab
question: |
  Do you own or have any legal or equitable interest in any residence, building, land, or similar property?
yesno: prop.interests.there_are_any
---
section: schedule_ab
question: |
  Do you have more interests to add?
yesno: prop.interests.there_is_another
under: |
  ${ prop_interests_table }
---
section: schedule_ab
question: |
  Tell the court about details about the interest in question.
fields:
  - Street: prop.interests[i].street
    default: 1111
  - City: prop.interests[i].city
    default: Tampa
  - State: prop.interests[i].state
    default: Florida
  - Zip: prop.interests[i].zip
    default: 99999
  - County: prop.interests[i].county
    default: Fulston
  - note: |
      <br><br>
      Tell the court about the value and interest in the property.
  - What is the property: prop.interests[i].type
    datatype: checkboxes
    choices: 
      - Single-family home
      - Duplex or Multi-unit building
      - Condominium or cooperative
      - Manufactured or mobile home
      - Land
      - Investment property
      - Timeshare
      - Other
    default: Other
  - Other property type: prop.interests[i].other_type
    default: other
  - Who has an interest in the property?: prop.interests[i].who
    input type: radio
    choices:
      - Debtor 1 only
      - Debtor 2 only
      - Debtor 1 and Debtor 2 only
      - At least one of the debtors and another
    default: |
      Debtor 1 only
  - Current property value: prop.interests[i].current_value
    default: 200000
    datatype: currency
  - Current value of what you own: prop.interests[i].current_owned_value
    default: 50000
    datatype: currency
  - Describe the nature of your ownership interest: prop.interests[i].ownership_interest
    input type: area
    default: NA
  - Is this community property?: prop.interests[i].is_community_property
    default: False
    datatype: yesnoradio
  - Other information about item, such as local property identification number: prop.interests[i].other_info
    default: Other info
---
table: prop_ab_vehicles_table
rows: prop.ab_vehicles
columns:
  - Make: row_item.make
  - Year: row_item.year
  - Current value of entire property: row_item.current_value
  - Current value of the portion you own: row_item.current_owned_value
edit:
  - make
  - year
  - current_value
  - current_owned_value
---
section: schedule_ab
question: |
  Do you own, lease, or have legal or equitable interest in any vehicles, whether they are registered or not?
yesno: prop.ab_vehicles.there_are_any
---
section: schedule_ab
question: |
  Do you have legal or equitable interest in any other vehicles?
yesno: prop.ab_vehicles.there_is_another
under: |
  ${ prop_ab_vehicles_table }
---
section: schedule_ab
question: |
  Tell the court about one of your vehicles.
subquestion: |
  Vehicles can include cars, vans, trucks, tractors, sport utility vehicles, motorcycles.
fields: 
  - Make: prop.ab_vehicles[i].make
    default: Toyota
  - Model: prop.ab_vehicles[i].model
    default: Corolla
  - Year: prop.ab_vehicles[i].year
    datatype: number
    default: 2012
  - Approximate milage: prop.ab_vehicles[i].milage
    datatype: number
    default: 200000
  - Who has an interest in the property?: prop.ab_vehicles[i].who
    input type: radio
    choices:
      - Debtor 1 only
      - Debtor 2 only
      - Debtor 1 and Debtor 2 only
      - At least one of the debtors and another
    default: |
      Debtor 1 only
  - Current property value: prop.ab_vehicles[i].current_value
    default: 200000
    datatype: currency
  - Current value of what you own: prop.ab_vehicles[i].current_owned_value
    default: 50000
    datatype: currency
  - Is this community property?: prop.ab_vehicles[i].is_community_property
    default: False
    datatype: yesnoradio
  - Other information: prop.ab_vehicles[i].other_info
    required: false
    input type: area
---
table: prop_ab_other_vehicles_table
rows: prop.ab_other_vehicles
columns:
  - Make: row_item.make
  - Year: row_item.year
  - Current value of entire property: row_item.current_value
  - Current value of the portion you own: row_item.current_owned_value
edit:
  - make
  - year
  - current_value
  - current_owned_value
---
section: schedule_ab
question: |
  Do you own, lease, or have legal or equitable interest in any other vehicle types not listed, whether they are registered or not?
yesno: prop.ab_other_vehicles.there_are_any
---
section: schedule_ab
question: |
  Do you have legal or equitable interest in any other vehicles?
yesno: prop.ab_other_vehicles.there_is_another
under: |
  ${ prop_ab_other_vehicles_table }
---
section: schedule_ab
question: |
  Tell the court about one of your water crafts
subquestion: |
  Other vehicles can include boats, trailers, motors, personal watercraft, fishing vessels, snowmobiles, motorcycle accessories.
fields: 
  - Make: prop.ab_other_vehicles[i].make
    default: Toyota
  - Model: prop.ab_other_vehicles[i].model
    default: Corolla
  - Year: prop.ab_other_vehicles[i].year
    datatype: number
    default: 2012
  - Other info: prop.ab_other_vehicles[i].other_info
    input type: area
    default: na
  - Who has an interest in the property?: prop.ab_other_vehicles[i].who
    input type: radio
    choices:
      - Debtor 1 only
      - Debtor 2 only
      - Debtor 1 and Debtor 2 only
      - At least one of the debtors and another
    default: |
      Debtor 1 only
  - Current property value: prop.ab_other_vehicles[i].current_value
    default: 200000
    datatype: currency
  - Current value of what you own: prop.ab_other_vehicles[i].current_owned_value
    default: 50000
    datatype: currency
  - Is this community property?: prop.ab_other_vehicles[i].is_community_property
    default: False
    datatype: yesnoradio
---
section: schedule_ab
question: |
  Describe your personal and household items.
fields:
  - Do you own any household good and furnishings?: prop.has_household_goods
    datatype: yesnoradio
    default: True
  - Describe: prop.household_goods_description
    default: Some goods
    input type: area
    show if: prop.has_household_goods
  - Total owned value: prop.household_goods_value
    datatype: currency
    default: 3000
    show if: prop.has_household_goods
  - Do you own any electronics?: prop.has_electronics
    datatype: yesnoradio
    default: True
  - Describe: prop.electronics_description
    default: Some electrons
    input type: area
    show if: prop.has_electronics
  - Total owned value: prop.electronics_value
    datatype: currency
    default: 500
  - Do you own any collectibles of value?: prop.has_collectibles
    datatype: yesnoradio
    default: True
  - Describe: prop.collectibles_description
    default: Some collectables
    input type: area
    show if: prop.has_collectibles
  - Total owned value: prop.collectibles_value
    datatype: currency
    default: 100
  - Do you own any sports and hobby equipment?: prop.has_hobby_equipment
    datatype: yesnoradio
    default: True
  - Describe: prop.hobby_equipment_description
    default: Some hobby equipment
    input type: area
    show if: prop.has_hobby_equipment
  - Total owned value: prop.hobby_equipment_value
    datatype: currency
    default: 3000
  - Do you own any firearms?: prop.has_firearms
    datatype: yesnoradio
    default: True
  - Describe: prop.firearms_description
    default: some firearms
    input type: area
    show if: prop.has_firearms
  - Total owned value: prop.firearms_value
    datatype: currency
    default: 500
    show if: prop.has_firearms
  - Do you own any clothes of value?: prop.has_clothes
    datatype: yesnoradio
    default: True
  - Describe: prop.clothes_description
    default: some clothes
    input type: area
    show if: prop.has_clothes
  - Total owned value: prop.clothes_value
    datatype: currency
    default: 200
    show if: prop.has_clothes
  - Do you own any jewlery of value?: prop.has_jewlery
    datatype: yesnoradio
    default: True
  - Describe: prop.jewlery_description
    default: some jewlery
    input type: area
    show if: prop.has_jewlery
  - Total owned value: prop.jewlery_value
    datatype: currency
    default: 3000
    show if: prop.has_jewlery
  - Do you own any non-farm animals?: prop.has_animals
    datatype: yesnoradio
    default: True
  - Describe: prop.animal_description
    default: some dogs and cats
    input type: area
    show if: prop.has_animals
  - Total owned value: prop.animal_value
    datatype: currency
    default: 500
    show if: prop.has_animals
  - Do you own any other perosnal and household items you did not already list, including any health aids you did not list: prop.has_other_household_items
    datatype: yesnoradio
    default: True
  - Describe: prop.other_household_items_description
    default: some home stuff
    input type: area
    show if: prop.has_other_household_items
  - Total howned value: prop.other_household_items_value
    default: 100
    datatype: currency
    show if: prop.has_other_household_items
---
section: schedule_ab
question: |
  What is your cash on hand?
subquestion: |
  Examples: Money you have in your wallet, in your home, in a safe deposit box, and on hand when you file your petition.
fields:
  - I have cash: prop.financial_assets.has_cash
    datatype: yesnoradio
    default: True
  - Total value: prop.financial_assets.cash_value
    datatype: currency
    default: 400
    show if: prop.financial_assets.has_cash
---
table: financial_deposits_table
rows: prop.financial_assets.deposits
columns:
  - Type: row_item.type
  - Institution: row_item.institution
  - Value: row_item.amount
edit:
  - type
  - institution
  - amount
---
section: schedule_ab
question: |
  Do you have any deposits of money?
subquestion: |
  Examples: Checking, savings, or other financial accounts; certificates of deposit; shares in credit unions, brokerage houses, and other similar institutions.
yesno: prop.financial_assets.deposits.there_are_any
---
section: schedule_ab
question: |
  Do you have any more deposits of money to report?
yesno: prop.financial_assets.deposits.there_is_another
under: |
  ${ financial_deposits_table }
---
section: schedule_ab
question: |
  Tell the court about your deposit.
fields: 
  - Account Type: prop.financial_assets.deposits[i].type
    choices: 
      - Checking
      - Savings
      - Certificates of deposit
      - Other financial account
  - Institution Name: prop.financial_assets.deposits[i].institution
    default: BECU
  - Amount: prop.financial_assets.deposits[i].amount
    default: 1000
    datatype: currency
---
table: financial_bonds_table
rows: prop.financial_assets.bonds_and_stocks
columns:
  - Institution: row_item.institution
  - Value: row_item.amount
edit:
  - institution
  - amount
---
section: schedule_ab
question: |
  Do you have any bonds, mutual funds, or publicly traded stocks?
subquestion: |
  Examples: Bond funds, investment accounts with brokerage firms, money market accounts.
yesno: prop.financial_assets.bonds_and_stocks.there_are_any
---
section: schedule_ab
question: |
  Do you have any more bonds, mutual funds, or publicly traded stocks?
yesno: prop.financial_assets.bonds_and_stocks.there_is_another
under: |
  ${ financial_bonds_table }
---
section: schedule_ab
question: |
  Tell the court about your bonds and stocks.
fields: 
  - Institution Name: prop.financial_assets.bonds_and_stocks[i].institution
    default: BECU
  - Amount: prop.financial_assets.bonds_and_stocks[i].amount
    default: 1000
    datatype: currency
---
table: financial_non_traded_stock_table
rows: prop.financial_assets.non_traded_stock
columns:
  - Entity: row_item.entity
  - percent of ownership: row_item.ownership_percent
  - Value: row_item.value
edit:
  - entity
  - ownership_percent
  - value
---
section: schedule_ab
question: |
  Do you have any non-publicly traded stock?
subquestion: |
  Examples: interests in incorporated and unincorporated businesses, including an interest in an LLC, partnership, and joint venture.
yesno: prop.financial_assets.non_traded_stock.there_are_any
---
section: schedule_ab
question: |
  Do you have any more non-publicly traded stock?
yesno: prop.financial_assets.non_traded_stock.there_is_another
under: |
  ${ financial_non_traded_stock_table }
---
section: schedule_ab
question: |
  Tell the court about your interests in incorporated and unincorporated businesses.
fields: 
  - Name of entity: prop.financial_assets.non_traded_stock[i].entity
    default: CoolCo LLC
  - percent of ownership: prop.financial_assets.non_traded_stock[i].ownership_percent
    default: 1
    datatype: percent
  - Value: prop.financial_assets.non_traded_stock[i].value
    default: 1000
    datatype: currency
---
table: financial_corporate_bonds_table
rows: prop.financial_assets.corporate_bonds
columns:
  - Issuer: row_item.issuer
  - Amount: row_item.amount
edit:
  - issuer
  - amount
---
section: schedule_ab
question: |
  Do you have any government and corporate bonds and other negotiable and non-negotiable instruments?
subquestion: |
  Negotiable instruments include personal checks, cashiers' checks, promissory notes
yesno: prop.financial_assets.corporate_bonds.there_are_any
---
section: schedule_ab
question: |
  Do you have any more government and corporate bonds?
yesno: prop.financial_assets.corporate_bonds.there_is_another
under: |
  ${ financial_corporate_bonds_table }
---
section: schedule_ab
question: |
  Tell the court about your interests in corporate bonds.
fields: 
  - Issuer: prop.financial_assets.corporate_bonds[i].issuer
    default: CoolCo LLC
  - Amount: prop.financial_assets.corporate_bonds[i].amount
    default: 1000
    datatype: currency
---
table: financial_retirement_accounts_table
rows: prop.financial_assets.retirement_accounts
columns:
  - Type: row_item.type
  - Institution: row_item.institution
  - Amount: row_item.amount
edit:
  - type
  - institution
  - amount
---
section: schedule_ab
question: |
  Do you have any retirement or pension accounts?
subquestion: |
  Examples: Interests in IRA, ERISA, Keogh, 401(k), 403(b), thrift savings accounts, or other pension or profit sharing plans.
yesno: prop.financial_assets.retirement_accounts.there_are_any
---
section: schedule_ab
question: |
  Do you have any more retirement or pension accounts?
yesno: prop.financial_assets.retirement_accounts.there_is_another
under: |
  ${ financial_retirement_accounts_table }
---
section: schedule_ab
question: |
  Tell the court about your interests retirement or pension accounts.
fields: 
  - Account Type: prop.financial_assets.retirement_accounts[i].type
    input type: radio
    choices:
      - 401(k) or similar plan
      - Pension plan
      - IRA
      - Retirement account
      - Keogh
      - Additional account
    default: |
      401(k) or similar plan
  - Institution: prop.financial_assets.retirement_accounts[i].institution
    default: CoolCo LLC
  - Amount: prop.financial_assets.retirement_accounts[i].amount
    default: 1000
    datatype: currency
---
table: financial_prepayments_table
rows: prop.financial_assets.prepayments
columns:
  - Type: row_item.type
  - Institution or individual: row_item.institution
  - Amount: row_item.amount
edit:
  - type
  - institution
  - amount
---
section: schedule_ab
question: |
  Do you have any security deposits or prepayments?
subquestion: |
  Your share of all unused deposits you have made so that you may continue service or use from a company. Examples: Agreements with landlords, prepaid rent, public utilities (electric, gas, water), telecommunications companies, or others.
yesno: prop.financial_assets.prepayments.there_are_any
---
section: schedule_ab
question: |
  Do you have any more security deposits or prepayments?
yesno: prop.financial_assets.prepayments.there_is_another
under: |
  ${ financial_prepayments_table }
---
section: schedule_ab
question: |
  Tell the court about your interests retirement or pension accounts.
fields: 
  - Account Type: prop.financial_assets.prepayments[i].type
    input type: radio
    choices:
      - Electric
      - Gas
      - Heating oil
      - Security deposit on rental unit
      - Prepaid rent
      - Telephone
      - Water
      - Rented furniture
      - Other
    default: |
      401(k) or similar plan
  - Institution: prop.financial_assets.prepayments[i].institution
    default: Real estate pros
  - Amount: prop.financial_assets.prepayments[i].amount
    default: 1000
    datatype: currency
---
table: financial_annuities_table
rows: prop.financial_assets.annuities
columns:
  - Issuer and description: row_item.issuer
    input type: area
  - Amount: row_item.amount
edit:
  - issuer
  - amount
---
section: schedule_ab
question: |
  Annuities?
subquestion: |
  A contract for a periodic payment of money to you, either for life or for a number of years.
yesno: prop.financial_assets.annuities.there_are_any
---
section: schedule_ab
question: |
  Do you have any more annuities?
yesno: prop.financial_assets.annuities.there_is_another
under: |
  ${ financial_annuities_table }
---
section: schedule_ab
question: |
  Tell the court about your annuity.
fields: 
  - Issuer: prop.financial_assets.annuities[i].issuer
    default: Florida Lottery
  - Amount: prop.financial_assets.annuities[i].amount
    default: 50000
    datatype: currency
---
table: financial_edu_accounts_table
rows: prop.financial_assets.edu_accounts
columns:
  - Institution and description: row_item.institution
    input type: area
  - Amount: row_item.amount
edit:
  - institution
  - amount
---
section: schedule_ab
question: |
  Interests in an education IRA, in an account in a qualifed ABLE program, or under a qualified state tuition program.
subquestion: |
  26 U.S.C. §§ 530(b)(1), 529A(b), and 529(b)(1).
yesno: prop.financial_assets.edu_accounts.there_are_any
---
section: schedule_ab
question: |
  Do you have any more education accounts?
yesno: prop.financial_assets.edu_accounts.there_is_another
under: |
  ${ financial_edu_accounts_table }
---
section: schedule_ab
question: |
  Tell the court about your education account.
fields: 
  - Institution: prop.financial_assets.edu_accounts[i].institution
    default: Fidelity
  - Amount: prop.financial_assets.edu_accounts[i].amount
    default: 30000
    datatype: currency
---
section: schedule_ab
question: |
  Do you have any trusts, equitable or future interests in property (other than anything previously listed), and rights or powers exercisable for your benefit?
fields: 
  - Has interests: prop.financial_assets.has_future_property_interest
    default: True
    datatype: yesnoradio
  - Describe interest: prop.financial_assets.future_property_interest_description
    default: NA
    input type: area
    show if: prop.financial_assets.has_future_property_interest
  - Interest value: prop.financial_assets.future_property_interest_value
    default: 3000
    datatype: currency
    show if: prop.financial_assets.had_future_property_interest
---
section: schedule_ab
question: |
  Do you have any patents, copyrights, trademarks, trade secrets, and other intellectual property?
subquestion: |
  Examples: Internet domain names, websites, proceeds from royalties and licensing agreements.
fields: 
  - Has interests: prop.financial_assets.has_ip_interest
    default: True
    datatype: yesnoradio
  - Describe IP: prop.financial_assets.ip_interest_description
    default: NA
    input type: area
    show if: prop.financial_assets.has_ip_interest
  - IP value: prop.financial_assets.ip_interest_value
    default: 20000
    datatype: currency
    show if: prop.financial_assets.has_ip_interest
---
section: schedule_ab
question: |
  Do you have any licenses, franchises, or other general intagibles?
subquestion: |
  Examples: Building permits, exclusive licenses, cooperative association holdings, liquor licenses, professional licenses.
fields:
  - Has interest: prop.financial_assets.has_intangible_interest
    default: True
    datatype: yesnoradio
  - Describe interest: prop.financial_assets.intangible_interest_description
    default: NA
    input type: area
    show if: prop.financial_assets.has_intangible_interest
  - Interest value: prop.financial_assets.intangible_interest_value
    default: 300
    datatype: currency
    show if: prop.financial_assets.has_intangible_interest
---
section: schedule_ab
question: |
  Money or property owed to you?
fields:
  - note: |
      Tax refunds owed to you
  - Tax refunds owed to you: prop.owed_property.has_tax_refund
    default: True
    datatype: yesnoradio
  - Give specific information about them: prop.owed_property.tax_refund_description
    default: NA
    input type: area
    show if: prop.owed_property.has_tax_refund
  - Federal amount: prop.owed_property.tax_refund_federal
    datatype: currency
    default: 300
    show if: prop.owed_property.has_tax_refund
    required: False
  - State amount: prop.owed_property.tax_refund_state
    datatype: currency
    default: 200
    show if: prop.owed_property.has_tax_refund
    required: False
  - Local amount: prop.owed_property.tax_refund_local
    datatype: currency
    default: 100
    show if: prop.owed_property.has_tax_refund
    required: False
  - note: |
      <br><br>
      Family support
      Examples: Past due or lump sum alimony, spousal support, child support, maintenance, divorce settlement, property settlement.
  - Family support owed to you: prop.owed_property.has_family_support
    default: True
    datatype: yesnoradio
  - Give specific information about them: prop.owed_property.family_support_description
    default: NA
    input type: area
    show if: prop.owed_property.has_family_support
    required: False
  - Alimony amount: prop.owed_property.family_support_alimony
    datatype: currency
    default: 200
    show if: prop.owed_property.has_family_support
    required: False
  - Maintenance amount: prop.owed_property.family_support_maintenance
    datatype: currency
    default: 300
    show if: prop.owed_property.has_family_support
    required: False
  - Support amount: prop.owed_property.family_support_support
    datatype: currency
    default: 400
    show if: prop.owed_property.has_family_support
    required: False
  - Divorce Settlement amount: prop.owed_property.family_support_divorce
    datatype: currency
    default: 1000
    show if: prop.owed_property.has_family_support
    required: False
  - Property Settlement amount: prop.owed_property.family_support_settlement
    datatype: currency
    default: 1500
    show if: prop.owed_property.has_family_support
    required: False
  - note: |
      <br><br>
      Other amounts someone owes you
      
      Examples: Unpaid wages, disability insurance payments, disability benefits, sick pay, vacation pay, workers' compensation, Social Security benefits; unpaid loans you made to someone else.
  - Other amounts owed: prop.owed_property.has_other_amounts
    default: True
    datatype: yesnoradio
  - Describe other amounts: prop.owed_property.other_amounts_description
    default: NA
    input type: area
    required: False
    show if: prop.owed_property.has_other_amounts
  - How much?: prop.owed_property.other_amounts_value
    datatype: currency
    default: 200
    required: False
    show if: prop.owed_property.has_other_amounts
  - note: |
      <br><br>
      Interest in insurance policies
      
      Examples: Health, disability, or life insurance; health savings account (HSA); credit, homeowner's, or renter's insurance
  - Has insurance policies: prop.owed_property.has_insurance_interest
    datatype: yesnoradio
    default: True
  - note: Institution 1
    show if: prop.owed_property.has_insurance_interest
  - Institution name: prop.owed_property.first_insurance_interest_name
    default: Institution 1
    required: False
    show if: prop.owed_property.has_insurance_interest
  - Beneficiary: prop.owed_property.first_insurance_beneficiary
    default: Me
    required: False
    show if: prop.owed_property.has_insurance_interest
  - Amount: prop.owed_property.first_insurance_interest_amount
    datatype: currency
    default: 400
    required: False
    show if: prop.owed_property.has_insurance_interest
  - note: Institution 2
    show if: prop.owed_property.has_insurance_interest
  - Institution name: prop.owed_property.second_insurance_interest_name
    default: Institution 2
    required: False
    show if: prop.owed_property.has_insurance_interest
  - Beneficiary: prop.owed_property.second_insurance_beneficiary
    default: Me
    required: False
    show if: prop.owed_property.has_insurance_interest
  - Amount: prop.owed_property.second_insurance_interest_amount
    datatype: currency
    default: 400
    required: False
    show if: prop.owed_property.has_insurance_interest
  - note: Institution 3
    show if: prop.owed_property.has_insurance_interest
  - Institution name: prop.owed_property.third_insurance_interest_name
    default: Institution 2
    required: False
    show if: prop.owed_property.has_insurance_interest
  - Beneficiary: prop.owed_property.third_insurance_beneficiary
    default: Me
    required: False
    show if: prop.owed_property.has_insurance_interest
  - Amount: prop.owed_property.third_insurance_interest_amount
    datatype: currency
    default: 400
    required: False
    show if: prop.owed_property.has_insurance_interest
  - note: |
      <br><br>
      Any interest in property that is due to you from someone who has died?
      
      If you are the beneficiary of a living trust, expect proceeds from a life insurance policy, or are currently entitled to receive property because someone has died.
  - Has interest: prop.owed_property.has_trust
    datatype: yesnoradio
    default: True
  - Description: prop.owed_property.trust_description
    input type: area
    default: NA
    required: False
    show if: prop.owed_property.has_trust
  - Amount: prop.owed_property.trust_amount
    datatype: currency
    default: 300
    required: False
    show if: prop.owed_property.has_trust
  - note: |
      <br><br>
      Claims against third parties, whether or not you have filed a lawsuit or made a demand for payment.
      
      Examples: Accidents, employment disputes, insurance claims, or rights to sue.
  - Has interest: prop.owed_property.has_third_party
    datatype: yesnoradio
    default: True
  - Description: prop.owed_property.third_party_description
    input type: area
    default: NA
    required: False
    show if: prop.owed_property.has_third_party
  - Amount: prop.owed_property.third_party_amount
    datatype: currency
    default: 400
    required: False
    show if: prop.owed_property.has_third_party
  - note: |
      <br><br>
      Other contingent and unliquidated claims of every nature, including counterclaims of the debtor and rights to set off claims
  - Has interest: prop.owed_property.has_contingent_claims
    datatype: yesnoradio
    default: True
  - Description: prop.owed_property.contingent_claims_description
    input type: area
    default: NA
    required: False
    show if: prop.owed_property.has_contingent_claims
  - Amount: prop.owed_property.contingent_claims_amount
    datatype: currency
    default: 600
    required: False
    show if: prop.owed_property.has_contingent_claims
  - note: |
      <br><br>
      Any financial assets you did not already list
  - Has other financial assets: prop.owed_property.has_other_assets
    datatype: yesnoradio
    default: True
  - Description: prop.owed_property.other_assets_description
    input type: area
    default: NA
    required: False
    show if: prop.owed_property.has_other_assets
  - Amount: prop.owed_property.other_assets_amount
    datatype: currency
    default: 150
    required: False
    show if: prop.owed_property.has_other_assets
---
section: schedule_ab
question: |
  Do you have any business-related property you won or have an interest in.
fields:
  - Do you own or have any legal or equitable interest in any business related property?: prop.business_property.has_property
    datatype: yesnoradio
    default: True
---
section: schedule_ab
question: |
  Tell us about your business-related property
fields:
  - note: |
      Accounts receiveable or commissions you already earned.
  - Has property: prop.business_property.has_ar
    datatype: yesnoradio
    default: True
  - Describe: prop.business_property.ar_description
    input type: area
    default: NA
    required: False
    show if: prop.business_property.has_ar
  - Amount: prop.business_property.ar_amount
    datatype: currency
    default: 300
    required: False
    show if: prop.business_property.has_ar
  - note: |
      <br><br>
      Office equipment, furnishings, and supplies
      
      Examples: Business-related computers, software, modems, printers, copiers, fax machines, rugs, telephones, desks, chairs, electronic devices
  - Has property: prop.business_property.has_equipment
    datatype: yesnoradio
    default: True
  - Describe: prop.business_property.equipment_description
    input type: area
    default: NA
    required: False
    show if: prop.business_property.has_equipment
  - Amount: prop.business_property.equipment_amount
    datatype: currency
    default: 400
    required: False
    show if: prop.business_property.has_equipment
  - note: |
      <br><br>
      Machinery, fixtures, equipment, supplies you use in business, and tools of your trade.
  - Has property: prop.business_property.has_machinery
    datatype: yesnoradio
    default: True
  - Describe: prop.business_property.machinery_description
    input type: area
    default: NA
    required: False
    show if: prop.business_property.has_machinery
  - Amount: prop.business_property.machinery_amount
    datatype: currency
    default: 100
    required: False
    show if: prop.business_property.has_machinery
  - note: |
      <br><br>
      Inventory
  - Has property: prop.business_property.has_inventory
    datatype: yesnoradio
    default: True
  - Describe: prop.business_property.inventory_description
    input type: area
    default: NA
    required: False
    show if: prop.business_property.has_inventory
  - Amount: prop.business_property.inventory_amount
    datatype: currency
    default: 500
    required: False
    show if: prop.business_property.has_inventory
  - note: |
      <br><br>
      Interests in partnerships or joint ventures
  - Has property: prop.business_property.has_partnerships
    datatype: yesnoradio
    default: True
  - Partnership 1: prop.business_property.partnershipDescription1
    default: partner 1
    required: False
  - Ownership %: prop.business_property.partnershipOwnership1
    datatype: percent
    default: 10
    required: False
  - Amount: prop.business_property.partnershipValue1
    datatype: currency
    default: 1000
    required: False
  - Partnership 2: prop.business_property.partnershipDescription2
    default: partner 2
    required: False
  - Ownership %: prop.business_property.partnershipOwnership2
    datatype: percent
    default: 10
    required: False
  - Amount: prop.business_property.partnershipValue2
    datatype: currency
    default: 1000
    required: False
  - Partnership 3: prop.business_property.partnershipDescription3
    default: partner 3
    required: False
  - Ownership %: prop.business_property.partnershipOwnership3
    datatype: percent
    default: 10
    required: False
  - Amount: prop.business_property.partnershipValue3
    datatype: currency
    default: 1000
    required: False
  - Partnership 4: prop.business_property.partnershipDescription4
    default: partner 4
    required: False
  - Ownership %: prop.business_property.partnershipOwnership4
    datatype: percent
    default: 10
    required: False
  - Amount: prop.business_property.partnershipValue4
    datatype: currency
    default: 1000
    required: False
  - Partnership 5: prop.business_property.partnershipDescription5
    default: partner 5
    required: False
  - Ownership %: prop.business_property.partnershipOwnership5
    datatype: percent
    default: 10
    required: False
  - Amount: prop.business_property.partnershipValue5
    datatype: currency
    default: 1000
    required: False
  - note: |
      <br><br>
      Customer lists, mailing lists, or other compilations
  - Has property: prop.business_property.has_lists
    datatype: yesnoradio
    default: True
  - Do your lists include personally identifiable information?: prop.business_property.has_identity_lists
    datatype: yesnoradio
    default: True
    required: False
    show if: prop.business_property.has_lists
  - Describe: prop.business_property.lists_description
    input type: area
    default: NA
    required: False
    show if: prop.business_property.has_lists
  - Amount: prop.business_property.lists_amount
    datatype: currency
    default: 800
    required: False
    show if: prop.business_property.has_lists
  - note: |
      <br><br>
      Any business-related property you did not already list
  - Has property: prop.business_property.has_other
    datatype: yesnoradio
    default: True
  - Other Property 1: prop.business_property.otherPropertyDescription1
    default: NA
    required: False
  - Amount: prop.business_property.otherPropertyAmount1
    datatype: currency
    default: 200
    required: false
  - Other Property 2: prop.business_property.otherPropertyDescription2
    default: NA
    required: False
  - Amount: prop.business_property.otherPropertyAmount2
    datatype: currency
    default: 200
    required: false
  - Other Property 3: prop.business_property.otherPropertyDescription3
    default: NA
    required: False
  - Amount: prop.business_property.otherPropertyAmount3
    datatype: currency
    default: 200
    required: false
  - Other Property 4: prop.business_property.otherPropertyDescription4
    default: NA
    required: False
  - Amount: prop.business_property.otherPropertyAmount4
    datatype: currency
    default: 200
    required: false
  - Other Property 5: prop.business_property.otherPropertyDescription5
    default: NA
    required: False
  - Amount: prop.business_property.otherPropertyAmount5
    datatype: currency
    default: 200
    required: false
  - Other Property 6: prop.business_property.otherPropertyDescription6
    default: NA
    required: False
  - Amount: prop.business_property.otherPropertyAmount6
    datatype: currency
    default: 200
    required: false


---
section: schedule_ab
question: |
  Do you own or have any legal or equitable interest in any farm- or commercial fishing-related property?
fields:
  - Do you own or have any legal or equitable interest in any business related property?: prop.farming_property.has_property
    datatype: yesnoradio
    default: True
---
section: schedule_ab
question: |
  Tell us about your Farm and Commecial Fishing-related property
fields:
  - note: |
      Farm animals
  - Has property: prop.farming_property.has_animals
    datatype: yesnoradio
    default: True
  - Describe: prop.farming_property.animal_description
    input type: area
    default: NA
    required: False
    show if: prop.farming_property.has_animals
  - Amount: prop.farming_property.animal_amount
    datatype: currency
    default: 800
    required: False
    show if: prop.farming_property.has_animals
  - note: |
      Crops --- either growing or harvested
  - Has property: prop.farming_property.has_crops
    datatype: yesnoradio
    default: True
  - Describe: prop.farming_property.crop_description
    input type: area
    default: NA
    required: False
    show if: prop.farming_property.has_crops
  - Amount: prop.farming_property.crop_amount
    datatype: currency
    default: 440
    required: False
    show if: prop.farming_property.has_crops
  - note: |
      Farm and fishing equipment, implements, machinery, fixtures, and tools of trade
  - Has property: prop.farming_property.has_equipment
    datatype: yesnoradio
    default: True
  - Describe: prop.farming_property.equipment_description
    input type: area
    default: NA
    required: False
    show if: prop.farming_property.has_equipment
  - Amount: prop.farming_property.equipment_amount
    datatype: currency
    default: 5000
    required: False
    show if: prop.farming_property.has_equipment
  - note: |
      Farm and fishing supplies, chemicals, and feed
  - Has property: prop.farming_property.has_supplies
    datatype: yesnoradio
    default: True
  - Describe: prop.farming_property.supplies_description
    input type: area
    default: NA
    required: False
    show if: prop.farming_property.has_supplies
  - Amount: prop.farming_property.supplies_amount
    datatype: currency
    default: 400
    required: False
    show if: prop.farming_property.has_supplies
  - note: |
      Any farm - and commercial fishing-related property you did not already list
  - Has property: prop.farming_property.has_commercial
    datatype: yesnoradio
    default: True
  - Describe: prop.farming_property.commercial_description
    input type: area
    default: NA
    required: False
    show if: prop.farming_property.has_commercial
  - Amount: prop.farming_property.commercial_amount
    datatype: currency
    default: 300
    required: False
    show if: prop.farming_property.has_commercial
---
section: schedule_ab
question: |
  Describe all property that you haven't already listed
fields:
  - note: |
      Do you have other property of any kind you did not already list?
      
      Examples: Season tickets, country club membership
  - Has property: prop.has_other_prop
    datatype: yesnoradio
    default: True
  - Describe: prop.other_prop_description
    input type: area
    required: False
    default: NA
    show if: prop.has_other_prop
  - Property value: prop.other_prop_value
    datatype: currency
    default: 300
    required: False
    show if: prop.has_other_prop
  - Property value: prop.other_prop_value2
    datatype: currency
    default: 300
    required: False
    show if: prop.has_other_prop
  - Property value: prop.other_prop_value3
    datatype: currency
    default: 300
    required: False
    show if: prop.has_other_prop
---
code: |
  debtor_name = debtor[0].name.first + " " + debtor[0].name.middle + " " + debtor[0].name.last
  if len(debtor) > 1:
    debtor2_name = debtor[1].name.first + " " + debtor[1].name.middle + " " + debtor[1].name.last
  else:
    debtor2_name = ''
---
code: |
  debtor_name = debtor[0].name.first + " " + debtor[0].name.middle + " " + debtor[0].name.last
  if len(debtor) > 1:
    debtor2_name = debtor[1].name.first + " " + debtor[1].name.middle + " " + debtor[1].name.last
  else:
    debtor2_name = ''
  ab = {}
  ab['debtor1_name_1'] = debtor_name
  ab['debtor1_name_2'] = debtor_name
  ab['debtor1_name_3'] = debtor_name
  ab['debtor1_name_4'] = debtor_name
  ab['debtor1_name_5'] = debtor_name
  ab['debtor1_name_6'] = debtor_name
  ab['debtor1_name_7'] = debtor_name
  ab['debtor1_name_8'] = debtor_name
  ab['debtor1_name_9'] = debtor_name
  ab['debtor1_name_10'] = debtor_name
  ab['debtor2_name_1'] = debtor2_name
  ab['bankruptcy_district'] = current_district
  ab['case_number_1'] = case_number
  ab['case_number_2'] = case_number
  ab['case_number_3'] = case_number
  ab['case_number_4'] = case_number
  ab['case_number_5'] = case_number
  ab['case_number_6'] = case_number
  ab['case_number_7'] = case_number
  ab['case_number_8'] = case_number
  ab['case_number_9'] = case_number
  ab['case_number_10'] = case_number
  ab['isAmended'] = amended_filing
  if len(prop.interests) > 0:
    ab['hasInterest'] = True
    i = 1
    for interest in prop.interests:
      ab['prop'+str(i)+'Debtor1Only'] = True if interest.who == 'Debtor 1 only' else False
      ab['prop'+str(i)+'Debtor2Only'] = True if interest.who == 'Debtor 2 only' else False
      ab['prop'+str(i)+'BothDebtorsOnly'] = True if interest.who == 'Debtor 1 and Debtor 2 only' else False
      ab['prop'+str(i)+'AtLeastOneDebtor'] = True if interest.who == 'At least one of the debtors and another' else False
      ab['prop'+str(i)+'Street'] = interest.street
      ab['prop'+str(i)+'City'] = interest.city
      ab['prop'+str(i)+'State'] = interest.state
      ab['prop'+str(i)+'Zip'] = interest.zip
      ab['prop'+str(i)+'County'] = interest.county
      ab['prop'+str(i)+'SingleFam'] = interest.type['Single-family home']
      ab['prop'+str(i)+'Duplex'] = interest.type['Duplex or Multi-unit building']
      ab['prop'+str(i)+'Condo'] = interest.type['Condominium or cooperative']
      ab['prop'+str(i)+'Mobile'] = interest.type['Manufactured or mobile home']
      ab['prop'+str(i)+'Land'] = interest.type['Land']
      ab['prop'+str(i)+'Investment'] = interest.type['Investment property']
      ab['prop'+str(i)+'Timeshare'] = interest.type['Timeshare']
      ab['prop'+str(i)+'Other'] = interest.type['Other']
      if interest.type['Other']:
        ab['prop'+str(i)+'OtherDesc'] = interest.other_type
      ab['prop'+str(i)+'CurrValue'] = currency(interest.current_value)
      ab['prop'+str(i)+'CurrOwed'] = currency(interest.current_owned_value)
      ab['prop'+str(i)+'InterestNature'] = interest.ownership_interest
      ab['prop'+str(i)+'_isCommunityProp'] = interest.is_community_property
      ab['prop'+str(i)+'ID'] = interest.other_info
      i += 1
    ab['interestsTotal'] = currency(sum(interest.current_owned_value for interest in prop.interests))
  else:
    ab['hasNoInterest'] = True
  
  if len(prop.ab_vehicles) > 0:
    ab['hasVehicles'] = True
    i = 1
    for car in prop.ab_vehicles:
      ab['v'+str(i)+'Make'] = car.make
      ab['v'+str(i)+'Model'] = car.model
      ab['v'+str(i)+'Year'] = car.year
      ab['v'+str(i)+'Milage'] = car.milage
      ab['v'+str(i)+'OtherInfo'] = car.other_info
      ab['v'+str(i)+'CurrValue'] = currency(car.current_value)
      ab['v'+str(i)+'CurrOwned'] = currency(car.current_owned_value)
      ab['v'+str(i)+'_isCommunity'] = car.is_community_property
      ab['v'+str(i)+'Debtor1Only'] = True if car.who == 'Debtor 1 only' else False
      ab['v'+str(i)+'Debtor2Only'] = True if car.who == 'Debtor 2 only' else False
      ab['v'+str(i)+'BothDebtorsOnly'] = True if car.who == 'Debtor 1 and Debtor 2 only' else False
      ab['v'+str(i)+'AtLeastOneDebtor'] = True if car.who == 'At least one of the debtors and another' else False
      i += 1
  else:
    ab['noVehicles'] = True
  
  if len(prop.ab_other_vehicles) > 0:
    ab['hasOtherVehicles'] = True
    i = 1
    for car in prop.ab_other_vehicles:
      ab['w'+str(i)+'Make'] = car.make
      ab['w'+str(i)+'Model'] = car.model
      ab['w'+str(i)+'Year'] = car.year
      ab['w'+str(i)+'OtherInfo'] = car.other_info
      ab['w'+str(i)+'CurrValue'] = currency(car.current_value)
      ab['w'+str(i)+'CurrOwned'] = currency(car.current_owned_value)
      ab['w'+str(i)+'_isCommunity'] = car.is_community_property
      ab['w'+str(i)+'Debtor1Only'] = True if car.who == 'Debtor 1 only' else False
      ab['w'+str(i)+'Debtor2Only'] = True if car.who == 'Debtor 2 only' else False
      ab['w'+str(i)+'BothDebtorsOnly'] = True if car.who == 'Debtor 1 and Debtor 2 only' else False
      ab['w'+str(i)+'AtLeastOneDebtor'] = True if car.who == 'At least one of the debtors and another' else False
      i += 1
    ab['p2OwnedTotal'] = currency(sum(vehicle.current_owned_value for vehicle in prop.ab_vehicles) + sum(vehicle.current_owned_value for vehicle in prop.ab_other_vehicles))
  else:
    ab['noOtherVehicles'] = True
    
  if prop.has_household_goods == True:
    ab['hasHouseholdGoods'] = True
    ab['householdDesc'] = prop.household_goods_description
    ab['householdAmt'] = currency(prop.household_goods_value)
  else:
    ab['noHouseholdGoods'] = True
    
  if prop.has_electronics == True:
    ab['hasElectronics'] = True
    ab['electronicsDesc'] = prop.electronics_description
    ab['electronicsAmt'] = currency(prop.electronics_value)
  else:
    ab['noElectronics'] = True
  
  if prop.has_collectibles == True:
    ab['hasCollectibles'] = True
    ab['collectiblesDesc'] = prop.collectibles_description
    ab['collectiblesAmt'] = currency(prop.collectibles_value)
  else:
    ab['noCollectibles'] = True
  
  if prop.has_hobby_equipment == True:
    ab['hasEquipment'] = True
    ab['equipmentDesc'] = prop.hobby_equipment_description
    ab['equipmentAmt'] = currency(prop.hobby_equipment_value)
  else:
    ab['noEquipment'] = True
    
  if prop.has_firearms == True:
    ab['hasFirearms'] = True
    ab['firearmsDesc'] = prop.firearms_description
    ab['firearmsAmt'] = currency(prop.firearms_value)
  else:
    ab['noFirearms'] = True
  
  if prop.has_clothes == True:
    ab['hasClothes'] = True
    ab['clothesDesc'] = prop.clothes_description
    ab['clothesAmt'] = currency(prop.clothes_value)
  else:
    ab['noClothes'] = True
  
  if prop.has_jewlery == True:
    ab['hasJewlery'] = True
    ab['jewleryDescription'] = prop.jewlery_description
    ab['jewleryAmt'] = currency(prop.jewlery_value)
  else:
    ab['noJewlery'] = True
  
  if prop.has_animals == True:
    ab['hasAnimals'] = True
    ab['animalsDesc'] = prop.animal_description
    ab['animalsAmt'] = currency(prop.animal_value)
  else:
    ab['noAnimals'] = True
  
  if prop.has_other_household_items == True:
    ab['hasOther'] = True
    ab['otherDesc'] = prop.other_household_items_description
    ab['OtherAmt'] = currency(prop.other_household_items_value)
  else:
    ab['noOther'] = True
  
  ab['p3TotalAmt'] = currency(prop.household_goods_value + prop.electronics_value + prop.collectibles_value + prop.hobby_equipment_value + prop.firearms_value + prop.clothes_value + prop.jewlery_value + prop.animal_value + prop.other_household_items_value)
  
  if prop.financial_assets.has_cash == True:
    ab['hasCash'] = True
    ab['cashAmt'] = currency(prop.financial_assets.cash_value)
  else:
    ab['noCash'] = True
  
  if len(prop.financial_assets.deposits) > 0:
    ab['hasDeposits'] = True
    i = 1
    for dep in prop.financial_assets.deposits:
      if len(list(filter(lambda x: x.type == 'Checking', prop.financial_assets.deposits))) > 0:
        ab['ch1Institution'] = list(filter(lambda x: x.type == 'Checking', prop.financial_assets.deposits))[0].institution
        ab['ch1Amt'] = currency(list(filter(lambda x: x.type == 'Checking', prop.financial_assets.deposits))[0].amount)
      if len(list(filter(lambda x: x.type == 'Checking', prop.financial_assets.deposits))) > 1:
        ab['ch2Institution'] = list(filter(lambda x: x.type == 'Checking', prop.financial_assets.deposits))[1].institution
        ab['ch2Amt'] = currency(list(filter(lambda x: x.type == 'Checking', prop.financial_assets.deposits))[0].amount)
      if len(list(filter(lambda x: x.type == 'Savings', prop.financial_assets.deposits))) > 0:
        ab['sv1Institution'] = list(filter(lambda x: x.type == 'Savings', prop.financial_assets.deposits))[0].institution
        ab['sv1Amt'] = currency(list(filter(lambda x: x.type == 'Savings', prop.financial_assets.deposits))[0].amount)
      if len(list(filter(lambda x: x.type == 'Savings', prop.financial_assets.deposits))) > 1:
        ab['sv2Institution'] = list(filter(lambda x: x.type == 'Savings', prop.financial_assets.deposits))[1].institution
        ab['sv2Amt'] = currency(list(filter(lambda x: x.type == 'Savings', prop.financial_assets.deposits))[1].amount)
      if len(list(filter(lambda x: x.type == 'Certificates of deposit', prop.financial_assets.deposits))) > 0:
        ab['cd1Institution'] = list(filter(lambda x: x.type == 'Certificates of deposit', prop.financial_assets.deposits))[0].institution
        ab['cd1Amt'] = currency(list(filter(lambda x: x.type == 'Certificates of deposit', prop.financial_assets.deposits))[0].amount)
      if len(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))) > 0:
        ab['ot1Institution'] = list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[0].institution
        ab['ot1Amt'] = currency(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[0].amount)
      if len(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))) > 1:
        ab['ot2Institution'] = list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[1].institution
        ab['ot2Amt'] = currency(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[1].amount)
      if len(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))) > 2:
        ab['ot3Institution'] = list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[2].institution
        ab['ot3Amt'] = currency(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[2].amount)
      if len(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))) > 3:
        ab['ot4Institution'] = list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[3].institution
        ab['ot4Amt'] = currency(list(filter(lambda x: x.type == 'Other financial account', prop.financial_assets.deposits))[3].amount)
  else:
    ab['noDeposits'] = True
  
  if len(prop.financial_assets.bonds_and_stocks) > 0:
    ab['hasBonds'] = True
    if len(prop.financial_assets.bonds_and_stocks) > 0:
      ab['b1Institution'] = prop.financial_assets.bonds_and_stocks[0].institution
      ab['b1Amt'] = currency(prop.financial_assets.bonds_and_stocks[0].amount)
    if len(prop.financial_assets.bonds_and_stocks) > 1:
      ab['b2Institution'] = prop.financial_assets.bonds_and_stocks[1].institution
      ab['b2Amt'] = currency(prop.financial_assets.bonds_and_stocks[1].amount)
    if len(prop.financial_assets.bonds_and_stocks) > 2:
      ab['b3Institution'] = prop.financial_assets.bonds_and_stocks[2].institution
      ab['b3Amt'] = currency(prop.financial_assets.bonds_and_stocks[2].amount)
  else:
    ab['noBonds'] = True
    
  if len(prop.financial_assets.non_traded_stock) > 0:
    ab['hasNonTradedStock'] = True
    i = 1
    for nt in prop.financial_assets.non_traded_stock:
      ab['nt'+str(i)+'Entity'] = nt.entity
      ab['nt'+str(i)+'Ownership'] = nt.ownership_percent
      ab['nt'+str(i)+'Amt'] = currency(nt.value)
      
      i += 1
  else:
    ab['noNonTradedStock'] = True
  
  if len(prop.financial_assets.corporate_bonds) > 0:
    ab['hasCorporateBonds'] = True
    i = 1
    for cb in prop.financial_assets.corporate_bonds:
      ab['cb'+str(i)+'Issuer'] = cb.issuer
      ab['cb'+str(i)+'Amt'] = currency(cb.amount)
      i += 1
  else:
    ab['noCorporateBonds'] = True
  
  if len(prop.financial_assets.retirement_accounts) > 0:
    ab['hasRetirement'] = True
    if len(list(filter(lambda x: x.type == '401(k) or similar plan', prop.financial_assets.retirement_accounts))) > 0:
      ab['kInstitution'] = list(filter(lambda x: x.type == '401(k) or similar plan', prop.financial_assets.retirement_accounts))[0].institution
      ab['kAmt'] = currency(list(filter(lambda x: x.type == '401(k) or similar plan', prop.financial_assets.retirement_accounts))[0].amount)
    if len(list(filter(lambda x: x.type == 'Pension plan', prop.financial_assets.retirement_accounts))) > 0:
      ab['pensionInstitution'] = list(filter(lambda x: x.type == 'Pension plan', prop.financial_assets.retirement_accounts))[0].institution
      ab['pensionAmt'] = currency(list(filter(lambda x: x.type == 'Pension plan', prop.financial_assets.retirement_accounts))[0].amount)
    if len(list(filter(lambda x: x.type == 'IRA', prop.financial_assets.retirement_accounts))) > 0:
      ab['iraInstitution'] = list(filter(lambda x: x.type == 'IRA', prop.financial_assets.retirement_accounts))[0].institution
      ab['iraAmt'] = currency(list(filter(lambda x: x.type == 'IRA', prop.financial_assets.retirement_accounts))[0].amount)
    if len(list(filter(lambda x: x.type == 'Retirement account', prop.financial_assets.retirement_accounts))) > 0:
      ab['retirementInstitution'] = list(filter(lambda x: x.type == 'Retirement account', prop.financial_assets.retirement_accounts))[0].institution
      ab['retirementAmt'] = currency(list(filter(lambda x: x.type == 'Retirement account', prop.financial_assets.retirement_accounts))[0].amount)
    if len(list(filter(lambda x: x.type == 'Keogh', prop.financial_assets.retirement_accounts))) > 0:
      ab['keoghInstitution'] = list(filter(lambda x: x.type == 'Keogh', prop.financial_assets.retirement_accounts))[0].institution
      ab['keoghAmt'] = currency(list(filter(lambda x: x.type == 'Keogh', prop.financial_assets.retirement_accounts))[0].amount)
    if len(list(filter(lambda x: x.type == 'Additional account', prop.financial_assets.retirement_accounts))) > 0:
      ab['add1Institution'] = list(filter(lambda x: x.type == 'Additional account', prop.financial_assets.retirement_accounts))[0].institution
      ab['add1Amt'] = currency(list(filter(lambda x: x.type == 'Additional account', prop.financial_assets.retirement_accounts))[0].amount)
    if len(list(filter(lambda x: x.type == 'Additional account', prop.financial_assets.retirement_accounts))) > 1:
      ab['add2Institution'] = list(filter(lambda x: x.type == 'Additional account', prop.financial_assets.retirement_accounts))[1].institution
      ab['add2Amt'] = currency(list(filter(lambda x: x.type == 'Additional account', prop.financial_assets.retirement_accounts))[1].amount)
  else:
    ab['noRetirement'] = True
  
  if len(prop.financial_assets.prepayments) > 0:
    ab['hasSecurityDeposits'] = True
    if len(list(filter(lambda x: x.type == 'Electric', prop.financial_assets.prepayments))) > 0:
      ab['electricInstitution'] = list(filter(lambda x: x.type == 'Electric', prop.financial_assets.prepayments))[0].institution
      ab['electricAmt'] = currency(list(filter(lambda x: x.type == 'Electric', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Gas', prop.financial_assets.prepayments))) > 0:
      ab['gasInstitution'] = list(filter(lambda x: x.type == 'Gas', prop.financial_assets.prepayments))[0].institution
      ab['gasAmt'] = currency(list(filter(lambda x: x.type == 'Gas', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Heating oil', prop.financial_assets.prepayments))) > 0:
      ab['oilInstitution'] = list(filter(lambda x: x.type == 'Heating oil', prop.financial_assets.prepayments))[0].institution
      ab['oilAmt'] = currency(list(filter(lambda x: x.type == 'Heating oil', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Security deposit on rental unit', prop.financial_assets.prepayments))) > 0:
      ab['rentalDepInstitution'] = list(filter(lambda x: x.type == 'Security deposit on rental unit', prop.financial_assets.prepayments))[0].institution
      ab['rentalDepAmt'] = currency(list(filter(lambda x: x.type == 'Security deposit on rental unit', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Prepaid rent', prop.financial_assets.prepayments))) > 0:
      ab['prepaidInstitution'] = list(filter(lambda x: x.type == 'Prepaid rent', prop.financial_assets.prepayments))[0].institution
      ab['prepaidAmt'] = currency(list(filter(lambda x: x.type == 'Prepaid rent', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Telephone', prop.financial_assets.prepayments))) > 0:
      ab['telephoneInstitution'] = list(filter(lambda x: x.type == 'Telephone', prop.financial_assets.prepayments))[0].institution
      ab['telephoneAmt'] = currency(list(filter(lambda x: x.type == 'Telephone', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Water', prop.financial_assets.prepayments))) > 0:
      ab['waterInstitution'] = list(filter(lambda x: x.type == 'Water', prop.financial_assets.prepayments))[0].institution
      ab['waterAmt'] = currency(list(filter(lambda x: x.type == 'Water', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Rented furniture', prop.financial_assets.prepayments))) > 0:
      ab['furnitureInstitution'] = list(filter(lambda x: x.type == 'Rented furniture', prop.financial_assets.prepayments))[0].institution
      ab['furnitureAmt'] = currency(list(filter(lambda x: x.type == 'Rented furniture', prop.financial_assets.prepayments))[0].amount)
    if len(list(filter(lambda x: x.type == 'Other', prop.financial_assets.prepayments))) > 0:
      ab['otherDepInstitution'] = list(filter(lambda x: x.type == 'Other', prop.financial_assets.prepayments))[0].institution
      ab['otherDepAmt'] = currency(list(filter(lambda x: x.type == 'Other', prop.financial_assets.prepayments))[0].amount)
  else:
    ab['noSecurityDeposits'] = True
  
  if len(prop.financial_assets.annuities) > 0:
    ab['hasAnnuities'] = True
    i = 1
    for ann in prop.financial_assets.annuities:
      ab['an'+str(i)+'Institution'] = ann.issuer
      ab['an'+str(i)+'Amt'] = currency(ann.amount)
      i += 1
  else:
    ab['noAnnuities'] = True
  
  if len(prop.financial_assets.edu_accounts) > 0:
    ab['hasEdu'] = True
    i = 1
    for edu in prop.financial_assets.edu_accounts:
      ab['edu'+str(i)+'Institution'] = edu.institution
      ab['edu'+str(i)+'Amt'] = currency(edu.amount)
      i += 1
  else:
    ab['noEdu'] = True
  
  if prop.financial_assets.has_future_property_interest == True:
    ab['hasTrusts'] = True
    ab['trustDesc'] = prop.financial_assets.future_property_interest_description
    ab['trustAmt'] = currency(prop.financial_assets.future_property_interest_value)
  else:
    ab['noTrusts'] = True
  
  if prop.financial_assets.has_ip_interest == True:
    ab['hasPatents'] = True
    ab['patentDesc'] = prop.financial_assets.ip_interest_description
    ab['patentAmt'] = currency(prop.financial_assets.ip_interest_value)
  else:
    ab['noPatents'] = True
  
  if prop.financial_assets.has_intangible_interest == True:
    ab['hasLicenses'] = True
    ab['licenseDesc'] = prop.financial_assets.intangible_interest_description
    ab['licenseAmt'] = currency(prop.financial_assets.intangible_interest_value)
  else:
    ab['noLicenses'] = True
  
  if prop.owed_property.has_tax_refund == True:
    ab['hasTaxRefunds'] = True
    ab['refundDesc'] = prop.owed_property.tax_refund_description
    ab['federalRefundAmt'] = currency(prop.owed_property.tax_refund_federal)
    ab['stateRefundAmt'] = currency(prop.owed_property.tax_refund_state)
    ab['localRefundAmt'] = currency(prop.owed_property.tax_refund_local)
  else:
    ab['noTaxRefunds'] = True
  
  if prop.owed_property.has_family_support == True:
    ab['hasFamilySupport'] = True
    ab['familySupportDesc'] = prop.owed_property.family_support_description
    ab['maintAmt'] = currency(prop.owed_property.family_support_maintenance)
    ab['supportAmt'] = currency(prop.owed_property.family_support_support)
    ab['divorceAmt'] = currency(prop.owed_property.family_support_divorce)
    ab['propAmt'] = currency(prop.owed_property.family_support_settlement)
  else:
    ab['noFamilySupport'] = True
  
  if prop.owed_property.has_other_amounts == True:
    ab['hasOtherAmts'] = True
    ab['otherAmtsDesc'] = prop.owed_property.other_amounts_description
    ab['otherAmtsAmt'] = currency(prop.owed_property.other_amounts_value)
  else:
    ab['noOtherAmts'] = True
  
  if prop.owed_property.has_insurance_interest == True:
    ab['hasInsurance'] = True
    ab['ins1Name'] = prop.owed_property.first_insurance_interest_name
    ab['ins1Beneficiary'] = prop.owed_property.first_insurance_beneficiary
    ab['ins1Amt'] = currency(prop.owed_property.first_insurance_interest_amount)
    ab['ins2Name'] = prop.owed_property.second_insurance_interest_name
    ab['ins2Beneficiary'] = prop.owed_property.second_insurance_beneficiary
    ab['ins2Amt'] = currency(prop.owed_property.second_insurance_interest_amount)
    ab['ins3Name'] = prop.owed_property.third_insurance_interest_name
    ab['ins3Beneficiary'] = prop.owed_property.third_insurance_beneficiary
    ab['ins3Amt'] = currency(prop.owed_property.third_insurance_interest_amount)
  else:
    ab['noInsurance'] = True
  
  if prop.owed_property.has_trust == True:
    ab['hasDeath'] = True
    ab['deathDesc'] = prop.owed_property.trust_description
    ab['deathAmt'] = currency(prop.owed_property.trust_amount)
  else:
    ab['noDeath'] = True
  
  if prop.owed_property.has_third_party == True:
    ab['hasThirdPartyClaims'] = True
    ab['thirdPartyClaimsDesc'] = prop.owed_property.third_party_description
    ab['thirdPartyClaimsAmt'] = currency(prop.owed_property.third_party_amount)
  else:
    ab['noThirdPartyClaims'] = True
  
  if prop.owed_property.has_contingent_claims == True:
    ab['hasContingentClaims'] = True
    ab['contingentClaimsDesc'] = prop.owed_property.contingent_claims_description
    ab['contingentClaimsAmt'] = currency(prop.owed_property.contingent_claims_amount)
  else:
    ab['noContingentClaims'] = True
    
  if prop.owed_property.has_other_assets == True:
    ab['hasOtherFinancialAssets'] = True
    ab['otherFinancialAssetsDesc'] = prop.owed_property.other_assets_description
    ab['otherFinancialAssetsAmt'] = currency(prop.owed_property.other_assets_amount)
  else:
    ab['noOtherFinancialAssets'] = True
  
  ab['p4TotalAmt'] = currency(prop.financial_assets.cash_value + sum(deposit.amount for deposit in prop.financial_assets.deposits) + sum(bond.amount for bond in prop.financial_assets.bonds_and_stocks) + sum(ntStock.value for ntStock in prop.financial_assets.non_traded_stock) + sum(cBond.amount for cBond in prop.financial_assets.corporate_bonds) + sum(retAct.amount for retAct in prop.financial_assets.retirement_accounts) + sum(prepay.amount for prepay in prop.financial_assets.prepayments) + sum(annu.amount for annu in prop.financial_assets.annuities) + sum(edu.amount for edu in prop.financial_assets.edu_accounts) + prop.financial_assets.future_property_interest_value + prop.financial_assets.ip_interest_value + prop.financial_assets.intangible_interest_value + prop.owed_property.tax_refund_federal + prop.owed_property.tax_refund_state + prop.owed_property.tax_refund_local + prop.owed_property.family_support_alimony + prop.owed_property.family_support_maintenance + prop.owed_property.family_support_support + prop.owed_property.family_support_divorce + prop.owed_property.family_support_settlement + prop.owed_property.other_amounts_value + prop.owed_property.first_insurance_interest_amount + prop.owed_property.second_insurance_interest_amount + prop.owed_property.third_insurance_interest_amount + prop.owed_property.trust_amount + prop.owed_property.third_party_amount)
  
  if prop.business_property.has_property == True:
    ab['hasBusinessProperty'] = True
    if prop.business_property.has_ar == True:
      ab['hasAR'] = True
      ab['arDesc'] = prop.business_property.ar_description
      ab['arAmt'] = currency(prop.business_property.ar_amount)
    else:
      ab['noAR'] = True
      
    if prop.business_property.has_equipment == True:
      ab['hasOfficeEquipment'] = True
      ab['officeEquipmentDesc'] = prop.business_property.equipment_description
      ab['officeEquipmentAmt'] = currency(prop.business_property.equipment_amount)
    else:
      ab['noOfficeEquipment'] = True
    
    if prop.business_property.has_machinery == True:
      ab['hasMachinery'] = True
      ab['machineryDesc'] = prop.business_property.machinery_description
      ab['machineryAmt'] = currency(prop.business_property.machinery_amount)
    else:
      ab['noMachinery'] = True
      
    if prop.business_property.has_inventory == True:
      ab['hasInventory'] = True
      ab['inventoryDesc'] = prop.business_property.inventory_description
      ab['inventoryAmt'] = currency(prop.business_property.inventory_amount)
    else:
      ab['noInventory'] = True
    
    if prop.business_property.has_partnerships == True:
      ab['hasPartnerships'] = True
      ab['part1Entity'] = prop.business_property.partnershipDescription1
      ab['part1Ownership'] = prop.business_property.partnershipOwnership1
      ab['part1Amt'] = currency(prop.business_property.partnershipValue1)
      ab['part2Entity'] = prop.business_property.partnershipDescription2
      ab['part2Ownership'] = prop.business_property.partnershipOwnership2
      ab['part2Amt'] = currency(prop.business_property.partnershipValue2)
      ab['part3Entity'] = prop.business_property.partnershipDescription3
      ab['part3Ownership'] = prop.business_property.partnershipOwnership3
      ab['part3Amt'] = currency(prop.business_property.partnershipValue3)
    else:
      ab['noPartnerships'] = True
    
    if prop.business_property.has_lists == True:
      ab['hasMailing'] = True
      if prop.business_property.has_identity_lists == True:
        ab['hasPersonalMailing'] = True
        ab['personalMailingDesc'] = prop.business_property.lists_description
        ab['personalMailingAmt'] = currency(prop.business_property.lists_amount)
      else:
        ab['noPersonalMailing'] = True
    else:
      ab['noMailing'] = True
    
    if prop.business_property.has_other == True:
      ab['hasOtherBusinessProp'] = True
      ab['otherProp1Desc'] = prop.business_property.otherPropertyDescription1
      ab['otherProp1Amt'] = currency(prop.business_property.otherPropertyAmount1)
      ab['otherProp2Desc'] = prop.business_property.otherPropertyDescription2
      ab['otherProp2Amt'] = currency(prop.business_property.otherPropertyAmount2)
      ab['otherProp3Desc'] = prop.business_property.otherPropertyDescription3
      ab['otherProp3Amt'] = currency(prop.business_property.otherPropertyAmount3)
      ab['otherProp4Desc'] = prop.business_property.otherPropertyDescription4
      ab['otherProp4Amt'] = currency(prop.business_property.otherPropertyAmount4)
      ab['otherProp5Desc'] = prop.business_property.otherPropertyDescription5
      ab['otherProp5Amt'] = currency(prop.business_property.otherPropertyAmount5)
      ab['otherProp6Desc'] = prop.business_property.otherPropertyDescription6
      ab['otherProp6Amt'] = currency(prop.business_property.otherPropertyAmount6)
      
    else:
      ab['noOtherBusinessProp'] = True
    
    ab['p5TotalAmt'] = currency(prop.business_property.ar_amount + prop.business_property.equipment_amount + prop.business_property.machinery_amount + prop.business_property.inventory_amount + prop.business_property.partnershipValue1 + prop.business_property.partnershipValue2 + prop.business_property.partnershipValue3 + prop.business_property.lists_amount + prop.business_property.otherPropertyAmount1 + prop.business_property.otherPropertyAmount2 + prop.business_property.otherPropertyAmount3 + prop.business_property.otherPropertyAmount4 + prop.business_property.otherPropertyAmount5 + prop.business_property.otherPropertyAmount6)
    
  else:
    ab['noBusinessProperty'] = True
  
  if prop.farming_property.has_property == True:
    ab['hasFishing'] = True
    if prop.farming_property.has_animals == True:
      ab['hasFarmAnimals'] = True
      ab['farmAnimalsDesc'] = prop.farming_property.animal_description
      ab['farmAnimalsAmt'] = currency(prop.farming_property.animal_amount)
    else:
      ab['noFarmAnimals'] = True
    
    if prop.farming_property.has_crops == True:
      ab['hasCrops'] = True
      ab['cropsDescription'] = prop.farming_property.crop_description
      ab['cropsAmt'] = currency(prop.farming_property.crop_amount)
    else:
      ab['noCrops'] = True
    
    if prop.farming_property.has_equipment == True:
      ab['hasFarmTools'] = True
      ab['farmToolsDesc'] = prop.farming_property.equipment_description
      ab['farmToolsAmt'] = currency(prop.farming_property.equipment_amount)
    else:
      ab['noFarmTools'] = True
    
    if prop.farming_property.has_supplies == True:
      ab['hasFarmFeed'] = True
      ab['farmFeedDescription'] = prop.farming_property.supplies_description
      ab['farmFeedAmt'] = currency(prop.farming_property.supplies_amount)
    else:
      ab['noFarmFeed'] = True
    
    if prop.farming_property.has_commercial == True:
      ab['hasOtherFarmProp'] = True
      ab['otherFarmPropDesc'] = prop.farming_property.commercial_description
      ab['otherFarmPropAmt'] = currency(prop.farming_property.commercial_amount)
    else:
      ab['noOtherFarmProp'] = True
    
    ab['p6TotalAmt'] = currency(prop.farming_property.animal_amount + prop.farming_property.crop_amount + prop.farming_property.equipment_amount + prop.farming_property.supplies_amount + prop.farming_property.commercial_amount)
  else:
    ab['noFishing'] = True
  
  if prop.has_other_prop == True:
    ab['hasOtherProperty'] = True
    ab['otherPropertyDesc'] = prop.other_prop_description
    ab['otherPropertyAmt1'] = currency(prop.other_prop_value)
    ab['otherPropertyAmt2'] = currency(prop.other_prop_value2)
    ab['otherPropertyAmt3'] = currency(prop.other_prop_value3)
    ab['p7TotalAmt'] = currency(prop.other_prop_value + prop.other_prop_value2 + prop.other_prop_value3)
  else:
    ab['noOtherProperty'] = True
    
  ab['p7TotalAmt'] = currency(prop.other_prop_value + prop.other_prop_value2 + prop.other_prop_value3)
  ab['p1TotalAmtFinal'] = currency(sum(interest.current_owned_value for interest in prop.interests))
  ab['p2TotalAmtFinal'] = currency(sum(vehicle.current_owned_value for vehicle in prop.ab_vehicles) + sum(vehicle.current_owned_value for vehicle in prop.ab_other_vehicles))
  ab['p3TotalAmtFinal'] = currency(prop.household_goods_value + prop.electronics_value + prop.collectibles_value + prop.hobby_equipment_value + prop.firearms_value + prop.clothes_value + prop.jewlery_value + prop.animal_value + prop.other_household_items_value)
  ab['p4TotalAmtFinal'] = currency(prop.financial_assets.cash_value + sum(deposit.amount for deposit in prop.financial_assets.deposits) + sum(bond.amount for bond in prop.financial_assets.bonds_and_stocks) + sum(ntStock.value for ntStock in prop.financial_assets.non_traded_stock) + sum(cBond.amount for cBond in prop.financial_assets.corporate_bonds) + sum(retAct.amount for retAct in prop.financial_assets.retirement_accounts) + sum(prepay.amount for prepay in prop.financial_assets.prepayments) + sum(annu.amount for annu in prop.financial_assets.annuities) + sum(edu.amount for edu in prop.financial_assets.edu_accounts) + prop.financial_assets.future_property_interest_value + prop.financial_assets.ip_interest_value + prop.financial_assets.intangible_interest_value + prop.owed_property.tax_refund_federal + prop.owed_property.tax_refund_state + prop.owed_property.tax_refund_local + prop.owed_property.family_support_alimony + prop.owed_property.family_support_maintenance + prop.owed_property.family_support_support + prop.owed_property.family_support_divorce + prop.owed_property.family_support_settlement + prop.owed_property.other_amounts_value + prop.owed_property.first_insurance_interest_amount + prop.owed_property.second_insurance_interest_amount + prop.owed_property.third_insurance_interest_amount + prop.owed_property.trust_amount + prop.owed_property.third_party_amount)
  ab['p5TotalAmtFinal'] = currency(prop.business_property.ar_amount + prop.business_property.equipment_amount + prop.business_property.machinery_amount + prop.business_property.inventory_amount + prop.business_property.partnershipValue1 + prop.business_property.partnershipValue2 + prop.business_property.partnershipValue3 + prop.business_property.lists_amount + prop.business_property.otherPropertyAmount1 + prop.business_property.otherPropertyAmount2 + prop.business_property.otherPropertyAmount3 + prop.business_property.otherPropertyAmount4 + prop.business_property.otherPropertyAmount5 + prop.business_property.otherPropertyAmount6)
  ab['p6TotalAmtFinal'] = currency(prop.farming_property.animal_amount + prop.farming_property.crop_amount + prop.farming_property.equipment_amount + prop.farming_property.supplies_amount + prop.farming_property.commercial_amount)
  ab['p7TotalAmtFinal'] = currency(prop.other_prop_value + prop.other_prop_value2 + prop.other_prop_value3)
  ab['totalABPropertyAmt'] = currency(sum(vehicle.current_owned_value for vehicle in prop.ab_vehicles) + sum(vehicle.current_owned_value for vehicle in prop.ab_other_vehicles) + prop.household_goods_value + prop.electronics_value + prop.collectibles_value + prop.hobby_equipment_value + prop.firearms_value + prop.clothes_value + prop.jewlery_value + prop.animal_value + prop.other_household_items_value + prop.financial_assets.cash_value + sum(deposit.amount for deposit in prop.financial_assets.deposits) + sum(bond.amount for bond in prop.financial_assets.bonds_and_stocks) + sum(ntStock.value for ntStock in prop.financial_assets.non_traded_stock) + sum(cBond.amount for cBond in prop.financial_assets.corporate_bonds) + sum(retAct.amount for retAct in prop.financial_assets.retirement_accounts) + sum(prepay.amount for prepay in prop.financial_assets.prepayments) + sum(annu.amount for annu in prop.financial_assets.annuities) + sum(edu.amount for edu in prop.financial_assets.edu_accounts) + prop.financial_assets.future_property_interest_value + prop.financial_assets.ip_interest_value + prop.financial_assets.intangible_interest_value + prop.owed_property.tax_refund_federal + prop.owed_property.tax_refund_state + prop.owed_property.tax_refund_local + prop.owed_property.family_support_alimony + prop.owed_property.family_support_maintenance + prop.owed_property.family_support_support + prop.owed_property.family_support_divorce + prop.owed_property.family_support_settlement + prop.owed_property.other_amounts_value + prop.owed_property.first_insurance_interest_amount + prop.owed_property.second_insurance_interest_amount + prop.owed_property.third_insurance_interest_amount + prop.owed_property.trust_amount + prop.owed_property.third_party_amount + prop.business_property.ar_amount + prop.business_property.equipment_amount + prop.business_property.machinery_amount + prop.business_property.inventory_amount + prop.business_property.partnershipValue1 + prop.business_property.partnershipValue2 + prop.business_property.partnershipValue3 + prop.business_property.lists_amount + prop.business_property.otherPropertyAmount1 + prop.business_property.otherPropertyAmount2 + prop.business_property.otherPropertyAmount3 + prop.business_property.otherPropertyAmount4 + prop.business_property.otherPropertyAmount5 + prop.business_property.otherPropertyAmount6 + prop.farming_property.animal_amount + prop.farming_property.crop_amount + prop.farming_property.equipment_amount + prop.farming_property.supplies_amount + prop.farming_property.commercial_amount + prop.other_prop_value + prop.other_prop_value2 + prop.other_prop_value3)
  ab['totalPersonalProp'] = currency(sum(vehicle.current_owned_value for vehicle in prop.ab_vehicles) + sum(vehicle.current_owned_value for vehicle in prop.ab_other_vehicles) + prop.household_goods_value + prop.electronics_value + prop.collectibles_value + prop.hobby_equipment_value + prop.firearms_value + prop.clothes_value + prop.jewlery_value + prop.animal_value + prop.other_household_items_value + prop.financial_assets.cash_value + sum(deposit.amount for deposit in prop.financial_assets.deposits) + sum(bond.amount for bond in prop.financial_assets.bonds_and_stocks) + sum(ntStock.value for ntStock in prop.financial_assets.non_traded_stock) + sum(cBond.amount for cBond in prop.financial_assets.corporate_bonds) + sum(retAct.amount for retAct in prop.financial_assets.retirement_accounts) + sum(prepay.amount for prepay in prop.financial_assets.prepayments) + sum(annu.amount for annu in prop.financial_assets.annuities) + sum(edu.amount for edu in prop.financial_assets.edu_accounts) + prop.financial_assets.future_property_interest_value + prop.financial_assets.ip_interest_value + prop.financial_assets.intangible_interest_value + prop.owed_property.tax_refund_federal + prop.owed_property.tax_refund_state + prop.owed_property.tax_refund_local + prop.owed_property.family_support_alimony + prop.owed_property.family_support_maintenance + prop.owed_property.family_support_support + prop.owed_property.family_support_divorce + prop.owed_property.family_support_settlement + prop.owed_property.other_amounts_value + prop.owed_property.first_insurance_interest_amount + prop.owed_property.second_insurance_interest_amount + prop.owed_property.third_insurance_interest_amount + prop.owed_property.trust_amount + prop.owed_property.third_party_amount + prop.business_property.ar_amount + prop.business_property.equipment_amount + prop.business_property.machinery_amount + prop.business_property.inventory_amount + prop.business_property.partnershipValue1 + prop.business_property.partnershipValue2 + prop.business_property.partnershipValue3 + prop.business_property.lists_amount + prop.business_property.otherPropertyAmount1 + prop.business_property.otherPropertyAmount2 + prop.business_property.otherPropertyAmount3 + prop.business_property.otherPropertyAmount4 + prop.business_property.otherPropertyAmount5 + prop.business_property.otherPropertyAmount6 + prop.farming_property.animal_amount + prop.farming_property.crop_amount + prop.farming_property.equipment_amount + prop.farming_property.supplies_amount + prop.farming_property.commercial_amount + prop.other_prop_value + prop.other_prop_value2 + prop.other_prop_value3)
  ab['totalPersonalPropCopy'] = currency(sum(vehicle.current_owned_value for vehicle in prop.ab_vehicles) + sum(vehicle.current_owned_value for vehicle in prop.ab_other_vehicles) + prop.household_goods_value + prop.electronics_value + prop.collectibles_value + prop.hobby_equipment_value + prop.firearms_value + prop.clothes_value + prop.jewlery_value + prop.animal_value + prop.other_household_items_value + prop.financial_assets.cash_value + sum(deposit.amount for deposit in prop.financial_assets.deposits) + sum(bond.amount for bond in prop.financial_assets.bonds_and_stocks) + sum(ntStock.value for ntStock in prop.financial_assets.non_traded_stock) + sum(cBond.amount for cBond in prop.financial_assets.corporate_bonds) + sum(retAct.amount for retAct in prop.financial_assets.retirement_accounts) + sum(prepay.amount for prepay in prop.financial_assets.prepayments) + sum(annu.amount for annu in prop.financial_assets.annuities) + sum(edu.amount for edu in prop.financial_assets.edu_accounts) + prop.financial_assets.future_property_interest_value + prop.financial_assets.ip_interest_value + prop.financial_assets.intangible_interest_value + prop.owed_property.tax_refund_federal + prop.owed_property.tax_refund_state + prop.owed_property.tax_refund_local + prop.owed_property.family_support_alimony + prop.owed_property.family_support_maintenance + prop.owed_property.family_support_support + prop.owed_property.family_support_divorce + prop.owed_property.family_support_settlement + prop.owed_property.other_amounts_value + prop.owed_property.first_insurance_interest_amount + prop.owed_property.second_insurance_interest_amount + prop.owed_property.third_insurance_interest_amount + prop.owed_property.trust_amount + prop.owed_property.third_party_amount + prop.business_property.ar_amount + prop.business_property.equipment_amount + prop.business_property.machinery_amount + prop.business_property.inventory_amount + prop.business_property.partnershipValue1 + prop.business_property.partnershipValue2 + prop.business_property.partnershipValue3 + prop.business_property.lists_amount + prop.business_property.otherPropertyAmount1 + prop.business_property.otherPropertyAmount2 + prop.business_property.otherPropertyAmount3 + prop.business_property.otherPropertyAmount4 + prop.business_property.otherPropertyAmount5 + prop.business_property.otherPropertyAmount6 + prop.farming_property.animal_amount + prop.farming_property.crop_amount + prop.farming_property.equipment_amount + prop.farming_property.supplies_amount + prop.farming_property.commercial_amount + prop.other_prop_value + prop.other_prop_value2 + prop.other_prop_value3)
  ab['totalABPropertyAmt'] = currency(sum(interest.current_owned_value for interest in prop.interests) + sum(vehicle.current_owned_value for vehicle in prop.ab_vehicles) + sum(vehicle.current_owned_value for vehicle in prop.ab_other_vehicles) + prop.household_goods_value + prop.electronics_value + prop.collectibles_value + prop.hobby_equipment_value + prop.firearms_value + prop.clothes_value + prop.jewlery_value + prop.animal_value + prop.other_household_items_value + prop.financial_assets.cash_value + sum(deposit.amount for deposit in prop.financial_assets.deposits) + sum(bond.amount for bond in prop.financial_assets.bonds_and_stocks) + sum(ntStock.value for ntStock in prop.financial_assets.non_traded_stock) + sum(cBond.amount for cBond in prop.financial_assets.corporate_bonds) + sum(retAct.amount for retAct in prop.financial_assets.retirement_accounts) + sum(prepay.amount for prepay in prop.financial_assets.prepayments) + sum(annu.amount for annu in prop.financial_assets.annuities) + sum(edu.amount for edu in prop.financial_assets.edu_accounts) + prop.financial_assets.future_property_interest_value + prop.financial_assets.ip_interest_value + prop.financial_assets.intangible_interest_value + prop.owed_property.tax_refund_federal + prop.owed_property.tax_refund_state + prop.owed_property.tax_refund_local + prop.owed_property.family_support_alimony + prop.owed_property.family_support_maintenance + prop.owed_property.family_support_support + prop.owed_property.family_support_divorce + prop.owed_property.family_support_settlement + prop.owed_property.other_amounts_value + prop.owed_property.first_insurance_interest_amount + prop.owed_property.second_insurance_interest_amount + prop.owed_property.third_insurance_interest_amount + prop.owed_property.trust_amount + prop.owed_property.third_party_amount + prop.business_property.ar_amount + prop.business_property.equipment_amount + prop.business_property.machinery_amount + prop.business_property.inventory_amount + prop.business_property.partnershipValue1 + prop.business_property.partnershipValue2 + prop.business_property.partnershipValue3 + prop.business_property.lists_amount + prop.business_property.otherPropertyAmount1 + prop.business_property.otherPropertyAmount2 + prop.business_property.otherPropertyAmount3 + prop.business_property.otherPropertyAmount4 + prop.business_property.otherPropertyAmount5 + prop.business_property.otherPropertyAmount6 + prop.farming_property.animal_amount + prop.farming_property.crop_amount + prop.farming_property.equipment_amount + prop.farming_property.supplies_amount + prop.farming_property.commercial_amount + prop.other_prop_value + prop.other_prop_value2 + prop.other_prop_value3)
---
event: schedule_ab_attach
section: schedule_ab
question: Schedule AB Attachment
attachment:
  pdf template file: form_b106ab.pdf
  code: ab
  variable name: ab_attach
continue button field: schedule_ab_attach

---
event: schedule_ab
section: schedule_ab
question: |
  Review property fields
review: 
  - note: |
      <br>
      ### Property Interests
      % if len(prop.interests) > 0:
        ${ prop_interests_table }
        ${ prop.interests.add_action() }
      % else:
        No property interests currently listed.
        ${ prop.interests.add_action() }
      % endif
  - note: |
      <br>
      ### Vehicles
      % if len(prop.ab_vehicles) > 0:
        ${ prop_ab_vehicles_table }
        ${ prop.ab_vehicles.add_action() }
      % else:
        No vehicles currently listed.
        ${ prop.ab_vehicles.add_action() }
      % endif
  - note: |
      <br>
      ### Other Vehicles
      % if len(prop.ab_other_vehicles) > 0:
        ${ prop_ab_other_vehicles_table }
        ${ prop.ab_other_vehicles.add_action() }
      % else:
        No other vehicles currently listed
        ${ prop.ab_other_vehicles.add_action() }
      % endif
  - note: |
      <br>
      ### Personal and household items
  - Revisit: prop.has_household_goods
    button: |
      % if prop.has_household_goods:
        Owns any household goods and furnishings: Yes
      % else:
        Owns any household goods and furnishings: No
      % endif
  - Revisit: prop.household_goods_description
    button: |
      Household Goods Description:
      ${ prop.household_goods_description }
      
      Total Value: ${ prop.household_goods_value }
    show if: prop.has_household_goods
  - Revisit: prop.has_electronics
    button: |
      % if prop.has_electronics:
        Owns electronics of value: Yes
      % else:
        Owns electronics of value: No
      % endif
  - Revisit: prop.electronics_description
    button: |
      Electronics Description:
      ${ prop.electronics_description }
      
      Total Value: ${ prop.electronics_value }
    show if: prop.has_electronics
  - Revisit: prop.has_collectibles
    button: |
      % if prop.has_collectables:
        Owns collectables: Yes
      % else:
        Owns collectables: No
      % endif
  - Revisit: prop.collectibles_description
    button: |
      Collectables Description:
      ${ prop.collectibles_description }
      
      Total Value: ${ prop.collectibles_value }
    show if: prop.has_collectibles
  - Revisit: prop.has_hobby_equipment
    button: |
      % if prop.has_hobby_equipment:
        Owns Hobby Equipment: Yes
      % else:
        Owns Hobby Equipment: No
      % endif
  - Revisit: prop.hobby_equipment_description
    button: |
      Hobby Equipment Description:
      ${ prop.hobby_equipment_description }
      
      Total Value: ${ prop.hobby_equipment_value }
    show if: prop.has_hobby_equipment
  - Revisit: prop.has_firearms
    button: |
      % if prop.has_firearms:
        Owns Firearms: Yes
      % else:
        Owns Firearms: No
      % endif
  - Revisit: prop.firearms_description
    button: |
      Firearms Description:
      ${ prop.firearms_description }
      
      Total Value: ${ prop.firearms_value }
    show if: prop.has_firearms
  - Revisit: prop.has_clothes
    button: |
      % if prop.has_clothes:
        Owns Clothes of Value: Yes
      % else:
        Owns Clothes of Value: No
      % endif
  - Revisit: prop.clothes_description
    button: |
      Clothes Description:
      ${ prop.clothes_description }
      
      Total Value: ${ prop.clothes_value }
    show if: prop.has_clothes
  - Revisit: prop.has_jewlery
    button: |
      % if prop.has_jewlery:
        Owns Jewlery: Yes
      % else:
        Owns Jewlery: No
      % endif
  - Revisit: prop.jewlery_description
    button: |
      Jewlery Description:
      ${ prop.jewlery_description }
      
      Total Value: ${ prop.jewlery_value }
    show if: prop.has_jewlery
  - Revisit: prop.has_animals
    button: |
      % if prop.has_animals:
        Owns Animals: Yes
      % else:
        Owns Animals: No
      % endif
  - Revisit: prop.animal_description
    button: |
      Animals Description:
      ${ prop.animal_description }
      
      Total Value: ${ prop.animal_value }
    show if: prop.has_animals
  - Revisit: prop.has_other_household_items
    button: |
      % if prop.has_other_household_items:
        Has Other Household Items: Yes
      % else:
        Has Other Household Items: No
      % endif
  - Revisit: prop.other_household_items_description
    button: |
      Other Household Items:
      ${ prop.other_household_items_description }
      
      Total Value: ${ prop.other_household_items_value }
    show if: prop.has_other_household_items
  - Revisit: prop.has_cash
    button: |
      % if prop.has_cash:
        Has cash on hand: Yes
      % else:
        Has cash on hand: No
      % endif
  - Revisit: prop.cash_value
    button: |
      Cash Value: ${ prop.cash_value }
    show if: prop.has_cash
  - note: |
      <br>
      ### Financial Assets
      
      Deposits
      % if len(prop.financial_assets.deposits) > 0:
        ${ financial_deposits_table }
        ${ prop.financial_assets.deposits.add_action() }
      % else:
        No deposits currently listed.
        ${ prop.financial_assets.deposits.add_action() }
      % endif
      
      Bonds & Stocks
      % if len(prop.financial_assets.bonds_and_stocks) > 0:
        ${ financial_bonds_table }
        ${ prop.financial_assets.bonds_and_stocks.add_action() }
      % else:
        No Stocks & Bonds
        ${ prop.financial_assets.bonds_and_stocks.add_action() }
      % endif

      Non Traded Stock
      % if len(prop.financial_assets.non_traded_stock) > 0:
        ${ financial_non_traded_stock_table }
        ${ prop.financial_assets.non_traded_stock.add_action() }
      % else:
        No Non Traded Stock
        ${ prop.financial_assets.non_traded_stock.add_action() }
      % endif
      
      Corporate Bonds
      % if len(prop.financial_assets.corporate_bonds) > 0:
        ${ financial_corporate_bonds_table }
        ${ prop.financial_assets.corporate_bonds.add_action() }
      % else:
        No Corporate Bonds
        ${ prop.financial_assets.corporate_bonds.add_action() }
      % endif
      
      Retirement Accounts
      % if len(prop.financial_assets.retirement_accounts) > 0:
        ${ financial_retirement_accounts_table }
        ${ prop.financial_assets.retirement_accounts.add_action() }
      % else:
        No Retirement Accounts
        ${ prop.financial_assets.retirement_accounts.add_action() }
      % endif
      
      Prepayments
      % if len(prop.financial_assets.prepayments) > 0:
        ${ financial_prepayments_table }
        ${ prop.financial_assets.prepayments.add_action() }
      % else:
        No Prepayments
        ${ prop.financial_assets.prepayments.add_action() }
      % endif
      
      Annuities
      % if len(prop.financial_assets.annuities) > 0:
        ${ financial_annuities_table }
        ${ prop.financial_assets.annuities.add_action() }
      % else:
        No Annuities
        ${ prop.financial_assets.annuities.add_action() }
      % endif      
      
      Education Accounts
      % if len(prop.financial_assets.edu_accounts) > 0:
        ${ financial_edu_account_table }
        ${ prop.financial_assets.edu_account.add_action() }
      % else:
        No Education Accounts
        ${ prop.financial_assets.edu_account.add_action() }
      % endif
  - Revisit: prop.financial_assets.has_future_property_interest
    button: |
      % if prop.financial_assets.has_future_property_interest:
        Has Future Property Interests: Yes
      % else:
        Has Future Property Interests: No
      % endif
  - Revisit: prop.financial_assets.future_property_interest_description
    button: |
      Future Property Interests:
      ${ prop.financial_assets.future_property_interest_description }
      
      Total Value: ${ prop.financial_assets.future_property_interest_value }
    show if: prop.financial_assets.has_future_property_interest
  - Revisit: prop.financial_assets.has_ip_interest
    button: |
      % if prop.financial_assets.has_ip_interest:
        Has IP Interests: Yes
      % else:
        Has IP Interests: No
      % endif
  - Revisit: prop.financial_assets.ip_interest_description
    button: |
      IP Interests:
      ${ prop.financial_assets.ip_interest_description }
      
      Total Value: ${ prop.financial_assets.ip_interest_value }
    show if: prop.financial_assets.has_ip_interest
  - Revisit: prop.financial_assets.has_intangible_interest
    button: |
      % if prop.financial_assets.has_intangible_interest:
        Has Intangible Interests: Yes
      % else:
        Has Intangible Interests: No
      % endif
  - Revisit: prop.financial_assets.intangible_interest_description
    button: |
      Intangible Interests:
      ${ prop.financial_assets.intangible_interest_description }
      
      Total Value: ${ prop.financial_assets.intangible_interest_value }
    show if: prop.financial_assets.has_intangible_interest
  - note: |
      ### Money or Property Owed
  - Revisit: prop.owed_property.has_tax_refund
    button: |
      % if prop.owed_property.has_tax_refund:
        Has Tax Refund: Yes
      % else:
        Has Tax Refund: No
      % endif
  - Revisit: prop.owed_property.tax_refund_description
    button: |
      Tax Refund:
      ${ prop.owed_property.tax_refund_description }
      
      Federal Value: ${ prop.owed_property.tax_refund_federal }
      State Value: ${ prop.owed_property.tax_refund_state }
      Local Value: ${ prop.owed_property.tax_refund_local }
    show if: prop.owed_property.has_tax_refund
  - Revisit: prop.owed_property.has_family_support
    button: |
      % if prop.owed_property.has_family_support:
        Has Family Support: Yes
      % else:
        Has Family Support: No
      % endif
  - Revisit: prop.owed_property.family_support_description
    button: |
      Family Support:
      ${ prop.owed_property.family_support_description }
      
      Alimony Amount: ${ prop.owed_property.family_support_alimony }
      Maintenance Amount: ${ prop.owed_property.family_support_maintenance }
      Support Amount: ${ prop.owed_property.family_support_support }
      Divorce Settlement Amount: ${ prop.owed_property.family_support_divorce }
      Property Settlement Amount: ${ prop.owed_property.family_support_settlment }
    show if: prop.owed_property.has_family_support
  - Revisit: prop.owed_property.has_other_amounts
    button: |
      % if prop.owed_property.has_other_amounts:
        Has other owed debts: Yes
      % else:
        Hos other owed debts: No
      % endif
  - Revisit: prop.owed_property.other_amounts_description
    button: |
      Other Amounts:
      ${ prop.owed_property.other_amounts_description }
      
      Total Value: ${ prop.owed_property.other_amounts_value }
    show if: prop.owed_property.has_other_amounts
  - Revisit: prop.owed_property.has_insurance_interest
    button: |
      % if prop.owed_property.has_insurance_interest:
        Has interest in insurance policies: Yes
      % else:
        Has interest in insurance policies: No
      % endif
  - Revisit: prop.owed_property.first_insurance_interest_name
    button: |
      % if prop.owed_property.first_insurance_interest_name:
        Insurance Interest 1:
        Name: ${ prop.owed_property.first_insurance_interest_name }
        Beneficiary: ${ prop.owed_property.first_insurance_beneficiary }
        Amount: ${ prop.owed_property.first_insurance_interest_amount }
      % endif
      
      % if prop.owed_property.second_insurance_interest_name:
        Insurance Interest 2:
        Name: ${ prop.owed_property.second_insurance_interest_name }
        Beneficiary: ${ prop.owed_property.second_insurance_beneficiary }
        Amount: ${ prop.owed_property.second_insurance_interest_amount }
      % endif
      
      % if prop.owed_property.third_insurance_interest_name:
        Insurance Interest 3:
        Name: ${ prop.owed_property.third_insurance_interest_name }
        Beneficiary: ${ prop.owed_property.third_insurance_beneficiary }
        Amount: ${ prop.owed_property.third_insurance_interest_amount }
      % endif
  - Revisit: prop.owed_property.has_trust
    button: |
      % if prop.owed_property.has_trust:
        Has interest in trust: Yes
      % else:
        Has interest in trust: No
      % endif
  - Revisit: prop.owed_property.trust_description
    button: |
      Trust Description
      ${ prop.owed_property.trust_description }
      
      Trust Value: ${ prop.owed_property.trust_amount }
    show if: prop.owed_property.has_trust
  - Revisit: prop.owed_property.has_third_party
    button: |
      % if prop.owed_property.has_third_party:
        Has claims against third parties: Yes
      % else:
        Has claims against third parties: No
      % endif
  - Revisit: prop.owed_property.third_party_description
    button: |
      Third Party Claims:
      ${ prop.owed_property.third_party_description }
      
      Total Value: ${ prop.owed_property.third_party_amount }
    show if: prop.owed_property.has_third_party
  - Revisit: prop.owed_property.has_contingent_claims
    button: |
      % if prop.owed_property.has_contingent_claims:
        Has other contingent claims: Yes
      % else:
        Has other contingent claims: No
      % endif
  - Revisit: prop.owed_property.contingent_claims_description
    button: |
      Contingent Claims:
      ${ prop.owed_property.contingent_claims_description }
      
      Total Value: ${ prop.owed_property.contingent_claims_amount }
    show if: prop.owed_property.has_contingent_claims
  - Revisit: prop.owed_property.has_other_assets
    button: |
      % if prop.owed_property.has_other_assets:
        Has other assets: Yes
      % else:
        Has other assets: No
      % endif
  - Revisit: prop.owed_property.other_assets_description
    button: |
      Other Assets:
      ${ prop.owed_property.other_assets_description }
      
      Total Value: ${ prop.owed_property.other_assets_amount }
    show if: prop.owed_property.has_other_assets
  - note: |
      <br>
      ### Business Related Property
  - Revisit: prop.business_property.has_property
    button: |
      % if prop.business_property.has_property:
        Has business property: Yes
      % else:
        Has business property: No
      % endif
  - Revisit: prop.business_property.has_ar
    button: |
      % if prop.business_property.has_ar:
        Business has Accounts Receivables: Yes
        ${ prop.business_property.ar_description }
        Total Value: ${ prop.business_property.ar_amount }
      % else:
        Business has Accounts Receivables: No
      % endif
      
      % if prop.business_property.has_equipment:
        Business has office equipment, furnishings, and supplies: Yes
        ${ prop.business_property.equipment_description }
        Total Value: ${ prop.business_property.equipment_amount }
      % else:
        Business has office equipment, furnishings, and supplies: No
      % endif
      
      % if prop.business_property.has_machinery:
        Business has machinery: Yes
        ${ prop.business_property.machinery_description }
        Total Value: ${ prop.business_property.machinery_amount }
      % else:
        Business has machinery: No
      % endif
      
      % if prop.business_property.has_inventory:
        Business has inventory: Yes
        ${ prop.business_property.inventory_description }
        Total Value: ${ prop.business_property.inventory_amount }
      % else:
        Business has inventory: No
      % endif
      
      % if prop.business_property.has_lists:
        Business has lists: Yes
        ${ prop.business_property.lists_description }
        Total Value: ${ prop.business_property.lists_amount }
      % else:
        Business has lists: No
      % endif
  - note: |
      <br>
      ### Farm or commercial fishing related property
  - Revisit: prop.farming_property.has_property
    button: |
      % if prop.farming_property.has_property:
        Has farming property: Yes
      % else:
        Has farming property: No
      % endif
  - Revisit: prop.farming_property.has_animals
    button: |
      % if prop.farming_property.has_animals:
        Farm has animals: Yes
        ${ prop.farming_property.animal_description }
        Total Value: ${ prop.farming_property.animal_amount }
      % else:  
        Farm has animals: No
      % endif
      
      % if prop.farming_property.has_crops:
        Farm has crops: Yes
        ${ prop.farming_property.crop_description }
        Total Value: ${ prop.farming_property.crop_amount }
      % else:
        Farm has crops: No
      % endif
      
      % if prop.farming_property.has_equipment:
        Farm has equipment: Yes
        ${ prop.farming_property.equipment_description }
        Total Value: ${ prop.farming_property.equipment_amount }
      % else:
        Farm has equipment: No
      % endif
      
      % if prop.farming_property.has_supplies:
        Farm has supplies: Yes
        ${ prop.farming_property.supplies_description }
        Total Value: ${ prop.farming_property.supplies_amount }
      % else:
        Farm has supplies: No
      % endif
      
      % if prop.farming_property.has_commercial:
        Farm has commercial fishing: Yes
        ${ prop.farming_property.commercial_description }
        Total Value: ${ prop.farming_property.commercial_amount }
      % else:
        Farm has commercial fishing: No
      % endif
    show if: prop.farming_property.has_property
  - Revisit: prop.has_other_prop
    button: |
      % if prop.has_other_prop:
        Has other property: Yes
        ${ prop.other_prop_description }
        Total Value: ${ prop.other_prop_value }
      % else:
        Has other property: No
      % endif

      
continue button field: prop.complete
---
      
      
      
      
      
      
      
      
      
      
      
      
      
    